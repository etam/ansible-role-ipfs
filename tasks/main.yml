- name: Get service facts
  service_facts:

- name: Create ipfs group
  become: yes
  group:
    system: yes
    name: ipfs

- name: Create ipfs user
  become: yes
  user:
    system: yes
    name: ipfs
    group: ipfs
    home: "{{ ipfs_home_dir }}"

- name: Create download directory
  become: yes
  file:
    path: "/usr/local/lib/ipfs-{{ ipfs_version }}"
    state: directory

- name: Download ipfs
  become: yes
  unarchive:
    src: "{{ (ansible_facts.services[\"ipfs.service\"] is defined and ansible_facts.services[\"ipfs.service\"].state == \"running\") | ternary(ipfs_local_release_url, ipfs_public_release_url) }}"
    dest: "/usr/local/lib/ipfs-{{ ipfs_version }}/"
    creates: "/usr/local/lib/ipfs-{{ ipfs_version }}/kubo"
    remote_src: yes
    owner: root
    group: root

- name: Link ipfs binary
  become: yes
  file:
    src: "/usr/local/lib/ipfs-{{ ipfs_version }}/kubo/ipfs"
    dest: "/usr/local/bin/ipfs"
    state: link
  notify: Restart ipfs

- name: Blocks dir
  when: ipfs_blocks_dir is defined
  block:

    - name: Create blocks dir
      become: yes
      file:
        path: "{{ ipfs_blocks_dir }}"
        state: directory
        owner: ipfs
        group: ipfs

    - name: Create ipfs dir
      become: yes
      file:
        path: "{{ ipfs_home_dir }}/.ipfs/"
        state: directory
        owner: ipfs
        group: ipfs

    - name: Link blocks dir
      become: yes
      become_user: ipfs
      file:
        state: link
        path: "{{ ipfs_home_dir }}/.ipfs/blocks"
        src: "{{ ipfs_blocks_dir }}"
      notify: Restart ipfs

- name: Init ipfs
  become: yes
  become_user: ipfs
  command:
    cmd: "/usr/local/bin/ipfs init -e -p \"{{ ipfs_init_profile }}\""
    creates: "{{ ipfs_home_dir }}/.ipfs/config"

- name: Stop ipfs
  become: yes
  systemd:
    name: ipfs
    state: stopped
  ignore_errors: yes

- name: Migrate ipfs repo
  become: yes
  become_user: ipfs
  command:
    cmd: "/usr/local/bin/ipfs repo migrate"

- name: Config ipfs Addresses.Swarm
  become: yes
  become_user: ipfs
  ipfs_config:
    key: Addresses.Swarm
    value:
      - "/ip4/0.0.0.0/tcp/{{ ipfs_swarm_port }}"
      - "/ip4/0.0.0.0/udp/{{ ipfs_swarm_port }}/quic-v1"
      - "/ip4/0.0.0.0/udp/{{ ipfs_swarm_port }}/quic-v1/webtransport"
      - "/ip6/::/tcp/{{ ipfs_swarm_port }}"
      - "/ip6/::/udp/{{ ipfs_swarm_port }}/quic-v1"
      - "/ip6/::/udp/{{ ipfs_swarm_port }}/quic-v1/webtransport"
  notify: Restart ipfs

- name: Config ipfs Addresses.Announce
  become: yes
  become_user: ipfs
  ipfs_config:
    key: Addresses.Announce
    value: "{{ ipfs_public_addresses }}"
  notify: Restart ipfs

- name: Get ipfs Identity.PeerID
  become: yes
  become_user: ipfs
  ipfs_config_get:
    key: Identity.PeerID
  register: ipfs_identity_peerid

- name: Workaround issue 6189
  # https://github.com/ansible/ansible/issues/6189
  set_fact:
    ipfs_public_addresses: "{{ ipfs_public_addresses }}"
    ipfs_private_addresses: "{{ ipfs_private_addresses }}"

- name: Config ipfs Peering.Peers
  become: yes
  become_user: ipfs
  ipfs_config:
    key: Peering.Peers
    value: |
      [
      {% for host in groups[ipfs_ansible_group] if host in ansible_play_hosts and host != inventory_hostname %}
        {
          'Addrs': {{ hostvars[host]['ipfs_public_addresses'] + hostvars[host]['ipfs_private_addresses'] }},
          'ID': "{{ hostvars[host]['ipfs_identity_peerid']['value'] }}",
        },
      {% endfor %}
      ]
  notify: Restart ipfs

- name: Config ipfs extra
  become: yes
  become_user: ipfs
  ipfs_config:
    key: "{{ item.key }}"
    value: "{{ item.value }}"
  loop: "{{ ipfs_config_extra | dict2items }}"
  notify: Restart ipfs

- name: Install ipfs.service
  become: yes
  template:
    src: ipfs.service.j2
    dest: /etc/systemd/system/ipfs.service
    owner: root
    group: root
  notify: Restart ipfs

- name: Install ipfs-gc.service
  become: yes
  copy:
    src: ipfs-gc.service
    dest: /etc/systemd/system/ipfs-gc.service
    owner: root
    group: root
  notify: Reload systemd

- name: Install ipfs-gc.timer
  become: yes
  template:
    src: ipfs-gc.timer.j2
    dest: /etc/systemd/system/ipfs-gc.timer
    owner: root
    group: root
  notify: Reload systemd

- name: Check /proc/sys/net/core/rmem_max is writable
  become: yes
  ansible.builtin.stat:
    path: /proc/sys/net/core/rmem_max
  register: rmem_max

- name: Set sysctl
  become: yes
  sysctl:
    name: net.core.rmem_max
    value: '2500000'
    sysctl_set: yes
    sysctl_file: /etc/sysctl.d/ipfs.conf
  when: rmem_max.stat.writeable is defined and rmem_max.stat.writeable

- name: Start ipfs
  become: yes
  systemd:
    daemon_reload: yes
    name: ipfs
    enabled: yes
    state: started
  register: ipfs_start

- name: Start ipfs-gc
  become: yes
  systemd:
    daemon_reload: yes
    name: ipfs-gc.timer
    enabled: yes
    state: started
